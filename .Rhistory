if(nrow(test3) > 4) {
test3.las2 <- loess.as2(x = test3$dbin, y = log10(test3$trans_llight))
test4 <- filter_stepwise(test2, depth.col = "cdepth", light.col = "trans_llight", agg.fun = median)
test4.las2 <- loess.as2(x = test4$cdepth, y = log10(test4$trans_llight))
#plot1 <- ggplot(testA) + geom_point(data = testA, aes(x = ctime, y = log10(trans_llight)), color = "black")
plot2 <- ggplot() +
geom_point(data = testA, aes(y = -cdepth, x = log10(trans_llight)), color = "black", size = rel(3), alpha = 0.5) +
geom_point(data = test2, aes(y = -dbin, x = log10(trans_llight)), color = "red")
plot3 <- ggplot() +
geom_point(data = test4, aes(y = -cdepth, x = log10(trans_llight)), color = "red", size = rel(3), alpha = 0.5) +
geom_point(data = test3, aes(y = -dbin, x = log10(trans_llight)), color = "blue") +
geom_path(aes(y = -seq(min(test3$dbin), max(test3$dbin), 0.2), x = predict(test3.las2, newdata = seq(min(test3$dbin), max(test3$dbin), 0.2))), color = "blue") +
geom_path(aes(y = -seq(min(test4$cdepth), max(test4$cdepth), 0.2), x = predict(test4.las2, newdata = seq(min(test4$cdepth), max(test4$cdepth), 0.2))), color = "red", linetype = 2)
print(grid.arrange(plot2, plot3, nrow = 1))
stepwise <- c(stepwise, mean(resid(test4.las2)^2))
mod_fit <- c(mod_fit, mean(resid(test3.las2)^2))
}
}
dev.off()
haulz <- unique(test$haul)
stepwise <- vector()
mod_fit <- vector()
require(castr)
pdf(file = "D:/test.pdf", width = 10, height = 8)
for(i in 1:length(haulz)) {
testA <- subset(test, haul == haulz[i])
test2 <- testA
test2$dbin <- findInterval(test2$cdepth, seq(0, max(test2$cdepth), 2), rightmost.closed = T, left.open = F) * 2 - 2/2
test3 <- aggregate(trans_llight ~ vessel + cruise + haul + dbin, data = test2, FUN = median)
if(nrow(test3) > 4) {
test3.las2 <- loess.as2(x = test3$dbin, y = log10(test3$trans_llight))
test4 <- filter_stepwise(test2, depth.col = "cdepth", light.col = "trans_llight", agg.fun = median)
test4.las2 <- loess.as2(x = test4$cdepth, y = log10(test4$trans_llight))
#plot1 <- ggplot(testA) + geom_point(data = testA, aes(x = ctime, y = log10(trans_llight)), color = "black")
plot2 <- ggplot() +
geom_point(data = testA, aes(y = -cdepth, x = log10(trans_llight)), color = "black", size = rel(3), alpha = 0.5) +
geom_point(data = test2, aes(y = -dbin, x = log10(trans_llight)), color = "red") + ggtitle(haulz[i])
plot3 <- ggplot() +
geom_point(data = test4, aes(y = -cdepth, x = log10(trans_llight)), color = "red", size = rel(3), alpha = 0.5) +
geom_point(data = test3, aes(y = -dbin, x = log10(trans_llight)), color = "blue") +
geom_path(aes(y = -seq(min(test3$dbin), max(test3$dbin), 0.2), x = predict(test3.las2, newdata = seq(min(test3$dbin), max(test3$dbin), 0.2))), color = "blue") +
geom_path(aes(y = -seq(min(test4$cdepth), max(test4$cdepth), 0.2), x = predict(test4.las2, newdata = seq(min(test4$cdepth), max(test4$cdepth), 0.2))), color = "red", linetype = 2) + ggtitle(" ")
print(grid.arrange(plot2, plot3, nrow = 1))
stepwise <- c(stepwise, mean(resid(test4.las2)^2))
mod_fit <- c(mod_fit, mean(resid(test3.las2)^2))
}
}
dev.off()
test <- test_process_all(dir.structure = light.dir[12],
cast.dir = "Upcast",
silent = T)
test <- subset(test, vessel == 89 & cruise == 200901)
haulz <- unique(test$haul)
stepwise <- vector()
mod_fit <- vector()
require(castr)
pdf(file = "D:/test_upcasts.pdf", width = 10, height = 8)
for(i in 1:length(haulz)) {
testA <- subset(test, haul == haulz[i])
test2 <- testA
test2$dbin <- findInterval(test2$cdepth, seq(0, max(test2$cdepth), 2), rightmost.closed = T, left.open = F) * 2 - 2/2
test3 <- aggregate(trans_llight ~ vessel + cruise + haul + dbin, data = test2, FUN = median)
if(nrow(test3) > 4) {
test3.las2 <- loess.as2(x = test3$dbin, y = log10(test3$trans_llight))
test4 <- filter_stepwise(test2, depth.col = "cdepth", light.col = "trans_llight", agg.fun = median)
test4.las2 <- loess.as2(x = test4$cdepth, y = log10(test4$trans_llight))
#plot1 <- ggplot(testA) + geom_point(data = testA, aes(x = ctime, y = log10(trans_llight)), color = "black")
plot2 <- ggplot() +
geom_point(data = testA, aes(y = -cdepth, x = log10(trans_llight)), color = "black", size = rel(3), alpha = 0.5) +
geom_point(data = test2, aes(y = -dbin, x = log10(trans_llight)), color = "red") + ggtitle(haulz[i])
plot3 <- ggplot() +
geom_point(data = test4, aes(y = -cdepth, x = log10(trans_llight)), color = "red", size = rel(3), alpha = 0.5) +
geom_point(data = test3, aes(y = -dbin, x = log10(trans_llight)), color = "blue") +
geom_path(aes(y = -seq(min(test3$dbin), max(test3$dbin), 0.2), x = predict(test3.las2, newdata = seq(min(test3$dbin), max(test3$dbin), 0.2))), color = "blue") +
geom_path(aes(y = -seq(min(test4$cdepth), max(test4$cdepth), 0.2), x = predict(test4.las2, newdata = seq(min(test4$cdepth), max(test4$cdepth), 0.2))), color = "red", linetype = 2) + ggtitle(" ")
print(grid.arrange(plot2, plot3, nrow = 1))
stepwise <- c(stepwise, mean(resid(test4.las2)^2))
mod_fit <- c(mod_fit, mean(resid(test3.las2)^2))
}
}
dev.off()
orientation <- readRDS(file = "D:/Projects/OneDrive/Thesis/Chapter 1 - Visual Foraging Condition in the Eastern Bering Sea/output/downcasts_algorithm.rds")
head(orientation)
nrow(orientation)
testA <- subset(test, haul == haulz[i])
orient.sub <- subset(orientation, haul == haulz[i])
min(orient.sub$cdepth)
orient.sub <- subset(orientation, haul == haulz[i])
if(nrow(orient.sub) >= 1) {
orient.sub <- subset(orient.sub, cdepth == min(orient.sub$cdepth))
plot4 <- ggplot() + geom_density(aes(x = orientation$direct_residual[orientation$cdepth == min(orient.sub$cdepth)])) +
ggtitle(paste0("Quality: ", orient.sub$quality, ", Min. Depth: ", min(orient.sub$cdepth))) +
geom_vline(aes(xintercept = orient.sub$direct_residual[1]), color = "red", linetype = 2)
} else {
plot4 <- ggplot() + geom_blank() + ggtitle(paste0("Quality: ", orient.sub$quality), ", Min. Depth: >5")
}
print(grid.arrange(plot2, plot3, plot4, nrow = 2))
nrow(orientation)
orientation <- readRDS(file = "D:/Projects/OneDrive/Thesis/Chapter 1 - Visual Foraging Condition in the Eastern Bering Sea/output/downcasts_algorithm.rds")
table(orientation$updown)
ggplot() + geom_density(aes(x = orientation$direct_residual[orientation$cdepth == min(orient.sub$cdepth)])) +
ggtitle(paste0("Quality: ", orient.sub$quality, ", Min. Depth: ", min(orient.sub$cdepth))) +
geom_vline(aes(xintercept = orient.sub$direct_residual[1]), color = "red", linetype = 2)
orientation <- readRDS(file = "D:/Projects/OneDrive/Thesis/Chapter 1 - Visual Foraging Condition in the Eastern Bering Sea/output/downcasts_algorithm.rds")
test <- test_process_all(dir.structure = light.dir[12],
cast.dir = "Downcast",
silent = T)
test <- subset(test, vessel == 89 & cruise == 200901)
haulz <- unique(test$haul)
stepwise <- vector()
mod_fit <- vector()
require(castr)
pdf(file = "D:/test_downcasts.pdf", width = 10, height = 8)
for(i in 1:length(haulz)) {
testA <- subset(test, haul == haulz[i])
test2 <- testA
test2$dbin <- findInterval(test2$cdepth, seq(0, max(test2$cdepth), 2), rightmost.closed = T, left.open = F) * 2 - 2/2
test3 <- aggregate(trans_llight ~ vessel + cruise + haul + dbin, data = test2, FUN = median)
if(nrow(test3) > 4) {
test3.las2 <- loess.as2(x = test3$dbin, y = log10(test3$trans_llight))
test4 <- filter_stepwise(test2, depth.col = "cdepth", light.col = "trans_llight", agg.fun = median)
test4.las2 <- loess.as2(x = test4$cdepth, y = log10(test4$trans_llight))
#plot1 <- ggplot(testA) + geom_point(data = testA, aes(x = ctime, y = log10(trans_llight)), color = "black")
plot2 <- ggplot() +
geom_point(data = testA, aes(y = -cdepth, x = log10(trans_llight)), color = "black", size = rel(3), alpha = 0.5) +
geom_point(data = test2, aes(y = -dbin, x = log10(trans_llight)), color = "red") + ggtitle(haulz[i])
plot3 <- ggplot() +
geom_point(data = test4, aes(y = -cdepth, x = log10(trans_llight)), color = "red", size = rel(3), alpha = 0.5) +
geom_point(data = test3, aes(y = -dbin, x = log10(trans_llight)), color = "blue") +
geom_path(aes(y = -seq(min(test3$dbin), max(test3$dbin), 0.2), x = predict(test3.las2, newdata = seq(min(test3$dbin), max(test3$dbin), 0.2))), color = "blue") +
geom_path(aes(y = -seq(min(test4$cdepth), max(test4$cdepth), 0.2), x = predict(test4.las2, newdata = seq(min(test4$cdepth), max(test4$cdepth), 0.2))), color = "red", linetype = 2) + ggtitle(" ")
orient.sub <- subset(orientation, haul == haulz[i] & (cruise == 200901 & vessel == 89))
if(nrow(orient.sub) >= 1) {
orient.sub <- subset(orient.sub, cdepth == min(orient.sub$cdepth))
plot4 <- ggplot() + geom_density(aes(x = orientation$direct_residual[orientation$cdepth == min(orient.sub$cdepth)])) +
ggtitle(paste0("Quality: ", orient.sub$quality, ", Min. Depth: ", min(orient.sub$cdepth))) +
geom_vline(aes(xintercept = orient.sub$direct_residual[1]), color = "red", linetype = 2)
} else {
plot4 <- ggplot() + geom_blank() + ggtitle(paste0("Quality: ", orient.sub$quality), ", Min. Depth: >5")
}
print(grid.arrange(plot2, plot3, plot4, nrow = 2))
stepwise <- c(stepwise, mean(resid(test4.las2)^2))
mod_fit <- c(mod_fit, mean(resid(test3.las2)^2))
}
}
dev.off()
plot2 <- ggplot() +
geom_point(data = testA, aes(y = -cdepth, x = log10(trans_llight)), color = "black", size = rel(3), alpha = 0.5) +
geom_point(data = test2, aes(y = -dbin, x = log10(trans_llight)), color = "blue") + ggtitle(haulz[i])
plot3 <- ggplot() +
geom_point(data = test4, aes(y = -cdepth, x = log10(trans_llight)), color = "blue", size = rel(3), alpha = 0.5) +
geom_point(data = test3, aes(y = -dbin, x = log10(trans_llight)), color = "red") +
geom_path(aes(y = -seq(min(test3$dbin), max(test3$dbin), 0.2), x = predict(test3.las2, newdata = seq(min(test3$dbin), max(test3$dbin), 0.2))), color = "red") +
geom_path(aes(y = -seq(min(test4$cdepth), max(test4$cdepth), 0.2), x = predict(test4.las2, newdata = seq(min(test4$cdepth), max(test4$cdepth), 0.2))), color = "red", linetype = 2) + ggtitle(" ")
print(grid.arrange(plot2, plot3, plot4, nrow = 2))
plot2 <- ggplot() +
geom_point(data = testA, aes(y = -cdepth, x = log10(trans_llight)), color = "black", size = rel(3), alpha = 0.5) +
geom_point(data = test2, aes(y = -dbin, x = log10(trans_llight)), color = "red") + ggtitle(haulz[i])
plot3 <- ggplot() +
geom_point(data = test4, aes(y = -cdepth, x = log10(trans_llight)), color = "blue", size = rel(3), alpha = 0.5) +
geom_point(data = test3, aes(y = -dbin, x = log10(trans_llight)), color = "red") +
geom_path(aes(y = -seq(min(test3$dbin), max(test3$dbin), 0.2), x = predict(test3.las2, newdata = seq(min(test3$dbin), max(test3$dbin), 0.2))), color = "red") +
geom_path(aes(y = -seq(min(test4$cdepth), max(test4$cdepth), 0.2), x = predict(test4.las2, newdata = seq(min(test4$cdepth), max(test4$cdepth), 0.2))), color = "blue", linetype = 2) + ggtitle(" ")
print(grid.arrange(plot2, plot3, plot4, nrow = 2))
indirect.orient <- readRDS(file = "D:/Projects/OneDrive/Thesis/Chapter 1 - Visual Foraging Condition in the Eastern Bering Sea/output/downcasts_indirect_algorithm.rds")
indirect.orient.sub <- subset(indirect.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
plot3 <- ggplot() + geom_density(aes(x = direct.orient$direct_residual[direct.orient$cdepth == min(direct.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = direct.orient.sub$direct_residual[1]), color = "red", linetype = 2)
ggplot() + geom_density(aes(x = direct.orient$direct_residual[direct.orient$cdepth == min(direct.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = direct.orient.sub$direct_residual[1]), color = "red", linetype = 2)
ggtitle(paste0("Quality: ", direct.orient.sub$quality, ", Min. Depth: ", min(direct.orient.sub$cdepth)))
direct.orient.sub <- subset(direct.orient.sub, cdepth == min(direct.orient.sub$cdepth))
direct.orient.sub <- subset(direct.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
direct.orient.sub <- subset(direct.orient.sub, cdepth == min(direct.orient.sub$cdepth))
direct.orient.sub <- subset(direct.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
direct.orient <- readRDS(file = "D:/Projects/OneDrive/Thesis/Chapter 1 - Visual Foraging Condition in the Eastern Bering Sea/output/downcasts_algorithm.rds")
direct.orient.sub <- subset(direct.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
direct.orient.sub <- subset(direct.orient.sub, cdepth == min(direct.orient.sub$cdepth))
ggplot() + geom_density(aes(x = direct.orient$direct_residual[direct.orient$cdepth == min(direct.orient.sub$cdepth)])) +
ggtitle(paste0("Quality: ", direct.orient.sub$quality, ", Min. Depth: ", min(direct.orient.sub$cdepth)))
ggplot() + geom_density(aes(x = direct.orient$direct_residual[direct.orient$cdepth == min(direct.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = direct.orient.sub$direct_residual[1]), color = "red", linetype = 2) +
ggtitle(paste0("Quality: ", direct.orient.sub$quality, ", Min. Depth: ", min(direct.orient.sub$cdepth)))
direct.orient.sub <- subset(direct.orient.sub, cdepth == min(direct.orient.sub$cdepth))
plot3 <- ggplot() + geom_density(aes(x = direct.orient$direct_residual[direct.orient$cdepth == min(direct.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = direct.orient.sub$direct_residual[1]), color = "red", linetype = 2) +
ggtitle(paste0("Quality: ", direct.orient.sub$quality, ", Min. Depth: ", min(direct.orient.sub$cdepth)))
indirect.orient.sub <- subset(indirect.orient.sub, cdepth == min(indirect.orient.sub$cdepth))
indirect.orient.sub <- subset(indirect.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
ggplot() + geom_density(aes(x = indirect.orient$light_residual[indirect.orient$cdepth == min(indirect.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = indirect.orient.sub$direct_residual[1]), color = "red", linetype = 2) +
scale_x_continuous(name = "Indirect residual") +
scale_y_continuous(name = "Density")
indirect.orient.sub
ggplot() + geom_density(aes(x = indirect.orient$light_residual[indirect.orient$cdepth == min(indirect.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = indirect.orient.sub$light_residual[1]), color = "red", linetype = 2) +
scale_x_continuous(name = "Indirect residual") +
scale_y_continuous(name = "Density")
ggplot() + geom_density(aes(x = direct.orient$direct_residual[direct.orient$cdepth == min(direct.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = direct.orient.sub$direct_residual[1]), color = "red", linetype = 2) +
ggtitle(paste0("Quality: ", direct.orient.sub$quality, ", Min. Depth: ", min(direct.orient.sub$cdepth))) +        scale_x_continuous(name = "Indirect residual") +
scale_y_continuous(name = "Density")
subset(indirect.orient.sub, cdepth == min(indirect.orient.sub$cdepth))
plot4 <- ggplot() + geom_density(aes(x = indirect.orient$light_residual[indirect.orient$cdepth == min(indirect.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = indirect.orient.sub$light_residual[1]), color = "red", linetype = 2) +
scale_x_continuous(name = "Indirect residual") +
scale_y_continuous(name = "Density")
ggplot() + geom_density(aes(x = indirect.orient$light_residual[indirect.orient$cdepth == min(indirect.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = indirect.orient.sub$light_residual[1]), color = "red", linetype = 2) +
scale_x_continuous(name = "Indirect residual") +
scale_y_continuous(name = "Density")
print(grid.arrange(plot1, plot2, plot3, plot4, nrow = 2))
ggplot() + geom_density(aes(x = direct.orient$direct_residual[direct.orient$cdepth == min(direct.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = direct.orient.sub$direct_residual[1]), color = "red", linetype = 2) +
ggtitle(paste0("Quality: ", direct.orient.sub$quality, ", Min. Depth: ", min(direct.orient.sub$cdepth))) +
scale_x_continuous(name = "Direct residual") +
scale_y_continuous(name = "Density")
direct.orient.sub
indirect.orient.sub
subset(indirect.orient.sub, cdepth == min(indirect.orient.sub$cdepth))
indirect.orient.sub <- subset(indirect.orient.sub, cdepth == min(indirect.orient.sub$cdepth))
plot4 <- ggplot() + geom_density(aes(x = indirect.orient$light_residual[indirect.orient$cdepth == min(indirect.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = indirect.orient.sub$light_residual[1]), color = "red", linetype = 2) +
scale_x_continuous(name = "Indirect residual") +
scale_y_continuous(name = "Density")
print(grid.arrange(plot1, plot2, plot3, plot4, nrow = 2))
plot3 <- ggplot() + geom_density(aes(x = direct.orient$direct_residual[direct.orient$cdepth == min(direct.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = direct.orient.sub$direct_residual[1]), color = "red", linetype = 2) +
ggtitle(paste0("Quality: ", direct.orient.sub$quality, ", Min. Depth: ", min(direct.orient.sub$cdepth))) +
scale_x_continuous(name = "Direct residual") +
scale_y_continuous(name = "Density")
print(grid.arrange(plot1, plot2, plot3, plot4, nrow = 2))
plot1 <- ggplot() +
geom_point(data = testA, aes(y = -cdepth, x = log10(trans_llight)), color = "black", size = rel(3), alpha = 0.5) +
geom_point(data = test2, aes(y = -dbin, x = log10(trans_llight)), color = "red") + ggtitle(haulz[i])
plot2 <- ggplot() +
geom_point(data = test4, aes(y = -cdepth, x = log10(trans_llight)), color = "blue", size = rel(3), alpha = 0.5) +
geom_point(data = test3, aes(y = -dbin, x = log10(trans_llight)), color = "red") +
geom_path(aes(y = -seq(min(test3$dbin), max(test3$dbin), 0.2), x = predict(test3.las2, newdata = seq(min(test3$dbin), max(test3$dbin), 0.2))), color = "red") +
geom_path(aes(y = -seq(min(test4$cdepth), max(test4$cdepth), 0.2), x = predict(test4.las2, newdata = seq(min(test4$cdepth), max(test4$cdepth), 0.2))), color = "blue", linetype = 2) + ggtitle(" ")
print(grid.arrange(plot1, plot2, plot3, plot4, nrow = 2))
plot4 <- ggplot() + geom_density(aes(x = indirect.orient$light_residual[indirect.orient$cdepth == min(indirect.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = indirect.orient.sub$light_residual[1]), color = "red", linetype = 2) +
scale_x_continuous(name = "Indirect residual") +
scale_y_continuous(name = "Density") + ggtitle(" ")
print(grid.arrange(plot1, plot2, plot3, plot4, nrow = 2))
haulz <- unique(test$haul)
stepwise <- vector()
mod_fit <- vector()
require(castr)
pdf(file = "D:/test_downcasts.pdf", width = 10, height = 8)
for(i in 1:length(haulz)) {
testA <- subset(test, haul == haulz[i])
test2 <- testA
test2$dbin <- findInterval(test2$cdepth, seq(0, max(test2$cdepth), 2), rightmost.closed = T, left.open = F) * 2 - 2/2
test3 <- aggregate(trans_llight ~ vessel + cruise + haul + dbin, data = test2, FUN = median)
if(nrow(test3) > 4) {
test3.las2 <- loess.as2(x = test3$dbin, y = log10(test3$trans_llight))
test4 <- filter_stepwise(test2, depth.col = "cdepth", light.col = "trans_llight", agg.fun = median)
test4.las2 <- loess.as2(x = test4$cdepth, y = log10(test4$trans_llight))
plot1 <- ggplot() +
geom_point(data = testA, aes(y = -cdepth, x = log10(trans_llight)), color = "black", size = rel(3), alpha = 0.5) +
geom_point(data = test2, aes(y = -dbin, x = log10(trans_llight)), color = "red") + ggtitle(haulz[i])
plot2 <- ggplot() +
geom_point(data = test4, aes(y = -cdepth, x = log10(trans_llight)), color = "blue", size = rel(3), alpha = 0.5) +
geom_point(data = test3, aes(y = -dbin, x = log10(trans_llight)), color = "red") +
geom_path(aes(y = -seq(min(test3$dbin), max(test3$dbin), 0.2), x = predict(test3.las2, newdata = seq(min(test3$dbin), max(test3$dbin), 0.2))), color = "red") +
geom_path(aes(y = -seq(min(test4$cdepth), max(test4$cdepth), 0.2), x = predict(test4.las2, newdata = seq(min(test4$cdepth), max(test4$cdepth), 0.2))), color = "blue", linetype = 2) + ggtitle(" ")
direct.orient.sub <- subset(direct.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
indirect.orient.sub <- subset(indirect.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
if(nrow(direct.orient.sub) >= 1) {
direct.orient.sub <- subset(direct.orient.sub, cdepth == min(direct.orient.sub$cdepth))
plot3 <- ggplot() + geom_density(aes(x = direct.orient$direct_residual[direct.orient$cdepth == min(direct.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = direct.orient.sub$direct_residual[1]), color = "red", linetype = 2) +
ggtitle(paste0("Quality: ", direct.orient.sub$quality, ", Min. Depth: ", min(direct.orient.sub$cdepth))) +
scale_x_continuous(name = "Direct residual") +
scale_y_continuous(name = "Density")
} else {
plot3 <- ggplot() + geom_blank() + ggtitle(paste0("Quality: ", direct.orient.sub$quality), ", Min. Depth: >5")
}
if(nrow(indirect.orient.sub) >= 1) {
indirect.orient.sub <- subset(indirect.orient.sub, cdepth == min(indirect.orient.sub$cdepth))
plot4 <- ggplot() + geom_density(aes(x = indirect.orient$light_residual[indirect.orient$cdepth == min(indirect.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = indirect.orient.sub$light_residual[1]), color = "red", linetype = 2) +
scale_x_continuous(name = "Indirect residual") +
scale_y_continuous(name = "Density") + ggtitle(" ")
} else {
plot4 <- ggplot() + geom_blank()
}
print(grid.arrange(plot1, plot2, plot3, plot4, nrow = 2))
stepwise <- c(stepwise, mean(resid(test4.las2)^2))
mod_fit <- c(mod_fit, mean(resid(test3.las2)^2))
}
}
dev.off()
haulz <- unique(test$haul)
stepwise <- vector()
mod_fit <- vector()
require(castr)
pdf(file = "D:/test_downcasts.pdf", width = 10, height = 8)
for(i in 1:length(haulz)) {
testA <- subset(test, haul == haulz[i])
test2 <- testA
test2$dbin <- findInterval(test2$cdepth, seq(0, max(test2$cdepth), 2), rightmost.closed = T, left.open = F) * 2 - 2/2
test3 <- aggregate(trans_llight ~ vessel + cruise + haul + dbin, data = test2, FUN = median)
if(nrow(test3) > 4) {
test3.las2 <- loess.as2(x = test3$dbin, y = log10(test3$trans_llight))
test4 <- filter_stepwise(test2, depth.col = "cdepth", light.col = "trans_llight", agg.fun = median)
test4.las2 <- loess.as2(x = test4$cdepth, y = log10(test4$trans_llight))
plot1 <- ggplot() +
geom_point(data = testA, aes(y = cdepth, x = log10(trans_llight)), color = "black", size = rel(3), alpha = 0.5) +
geom_point(data = test2, aes(y = dbin, x = log10(trans_llight)), color = "red") +
scale_y_reverse(name = "Depth")  + ggtitle(haulz[i])
plot2 <- ggplot() +
geom_point(data = test4, aes(y = cdepth, x = log10(trans_llight)), color = "blue", size = rel(3), alpha = 0.5) +
geom_point(data = test3, aes(y = dbin, x = log10(trans_llight)), color = "red") +
geom_path(aes(y = seq(min(test3$dbin), max(test3$dbin), 0.2), x = predict(test3.las2, newdata = seq(min(test3$dbin), max(test3$dbin), 0.2))), color = "red") +
geom_path(aes(y = seq(min(test4$cdepth), max(test4$cdepth), 0.2), x = predict(test4.las2, newdata = seq(min(test4$cdepth), max(test4$cdepth), 0.2))), color = "blue", linetype = 2) +
scale_y_reverse(name = "Depth") + ggtitle(" ")
direct.orient.sub <- subset(direct.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
indirect.orient.sub <- subset(indirect.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
if(nrow(direct.orient.sub) >= 1) {
direct.orient.sub <- subset(direct.orient.sub, cdepth == min(direct.orient.sub$cdepth))
plot3 <- ggplot() + geom_density(aes(x = direct.orient$direct_residual[direct.orient$cdepth == min(direct.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = direct.orient.sub$direct_residual[1]), color = "red", linetype = 2) +
ggtitle(paste0("Quality: ", direct.orient.sub$quality, ", Min. Depth: ", min(direct.orient.sub$cdepth))) +
scale_x_continuous(name = "Direct residual") +
scale_y_continuous(name = "Density")
} else {
plot3 <- ggplot() + geom_blank() + ggtitle(paste0("Quality: ", direct.orient.sub$quality), ", Min. Depth: >5")
}
if(nrow(indirect.orient.sub) >= 1) {
indirect.orient.sub <- subset(indirect.orient.sub, cdepth == min(indirect.orient.sub$cdepth))
plot4 <- ggplot() + geom_density(aes(x = indirect.orient$light_residual[indirect.orient$cdepth == min(indirect.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = indirect.orient.sub$light_residual[1]), color = "red", linetype = 2) +
scale_x_continuous(name = "Indirect residual") +
scale_y_continuous(name = "Density") + ggtitle(" ")
} else {
plot4 <- ggplot() + geom_blank() + ggtitle(" ")
}
print(grid.arrange(plot1, plot2, plot3, plot4, nrow = 2))
stepwise <- c(stepwise, mean(resid(test4.las2)^2))
mod_fit <- c(mod_fit, mean(resid(test3.las2)^2))
}
}
dev.off()
plot1 <- ggplot() +
geom_point(data = testA, aes(y = cdepth, x = log10(trans_llight)), color = "black", size = rel(3), alpha = 0.5) +
geom_point(data = test2, aes(y = dbin, x = log10(trans_llight)), color = "red") +
scale_y_reverse(name = "Depth") +
scale_x_continuous(name = "log10(light") +
ggtitle(haulz[i])
plot2 <- ggplot() +
geom_point(data = test4, aes(y = cdepth, x = log10(trans_llight)), color = "blue", size = rel(3), alpha = 0.5) +
geom_point(data = test3, aes(y = dbin, x = log10(trans_llight)), color = "red") +
geom_path(aes(y = seq(min(test3$dbin), max(test3$dbin), 0.2), x = predict(test3.las2, newdata = seq(min(test3$dbin), max(test3$dbin), 0.2))), color = "red") +
geom_path(aes(y = seq(min(test4$cdepth), max(test4$cdepth), 0.2), x = predict(test4.las2, newdata = seq(min(test4$cdepth), max(test4$cdepth), 0.2))), color = "blue", linetype = 2) +
scale_y_reverse(name = "Depth") +
scale_x_continuous(name = "log10(light") +
ggtitle(" ")
print(grid.arrange(plot1, plot2, plot3, plot4, nrow = 2))
haulz <- unique(test$haul)
stepwise <- vector()
mod_fit <- vector()
require(castr)
pdf(file = "D:/test_downcasts.pdf", width = 10, height = 8)
for(i in 1:length(haulz)) {
testA <- subset(test, haul == haulz[i])
test2 <- testA
test2$dbin <- findInterval(test2$cdepth, seq(0, max(test2$cdepth), 2), rightmost.closed = T, left.open = F) * 2 - 2/2
test3 <- aggregate(trans_llight ~ vessel + cruise + haul + dbin, data = test2, FUN = median)
if(nrow(test3) > 4) {
test3.las2 <- loess.as2(x = test3$dbin, y = log10(test3$trans_llight))
test4 <- filter_stepwise(test2, depth.col = "cdepth", light.col = "trans_llight", agg.fun = median)
test4.las2 <- loess.as2(x = test4$cdepth, y = log10(test4$trans_llight))
plot1 <- ggplot() +
geom_point(data = testA, aes(y = cdepth, x = log10(trans_llight)), color = "black", size = rel(3), alpha = 0.5) +
geom_point(data = test2, aes(y = dbin, x = log10(trans_llight)), color = "red") +
scale_y_reverse(name = "Depth") +
scale_x_continuous(name = "log10(light") +
ggtitle(haulz[i])
plot2 <- ggplot() +
geom_point(data = test4, aes(y = cdepth, x = log10(trans_llight)), color = "blue", size = rel(3), alpha = 0.5) +
geom_point(data = test3, aes(y = dbin, x = log10(trans_llight)), color = "red") +
geom_path(aes(y = seq(min(test3$dbin), max(test3$dbin), 0.2), x = predict(test3.las2, newdata = seq(min(test3$dbin), max(test3$dbin), 0.2))), color = "red") +
geom_path(aes(y = seq(min(test4$cdepth), max(test4$cdepth), 0.2), x = predict(test4.las2, newdata = seq(min(test4$cdepth), max(test4$cdepth), 0.2))), color = "blue", linetype = 2) +
scale_y_reverse(name = "Depth") +
scale_x_continuous(name = "log10(light") +
ggtitle(" ")
direct.orient.sub <- subset(direct.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
indirect.orient.sub <- subset(indirect.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
if(nrow(direct.orient.sub) >= 1) {
direct.orient.sub <- subset(direct.orient.sub, cdepth == min(direct.orient.sub$cdepth))
plot3 <- ggplot() + geom_density(aes(x = direct.orient$direct_residual[direct.orient$cdepth == min(direct.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = direct.orient.sub$direct_residual[1]), color = "red", linetype = 2) +
ggtitle(paste0("Quality: ", direct.orient.sub$quality, ", Min. Depth: ", min(direct.orient.sub$cdepth))) +
scale_x_continuous(name = "Direct residual") +
scale_y_continuous(name = "Density")
} else {
plot3 <- ggplot() + geom_text(aes(x = 1, y = 1, label = "Minimum depth > 5 m")) + ggtitle(" ")
}
if(nrow(indirect.orient.sub) >= 1) {
indirect.orient.sub <- subset(indirect.orient.sub, cdepth == min(indirect.orient.sub$cdepth))
plot4 <- ggplot() + geom_density(aes(x = indirect.orient$light_residual[indirect.orient$cdepth == min(indirect.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = indirect.orient.sub$light_residual[1]), color = "red", linetype = 2) +
scale_x_continuous(name = "Indirect residual") +
scale_y_continuous(name = "Density") + ggtitle(" ")
} else {
plot4 <- ggplot() + geom_text(aes(x = 1, y = 1, label = "Minimum depth > 5 m")) + ggtitle(" ")
}
print(grid.arrange(plot1, plot2, plot3, plot4, nrow = 2))
stepwise <- c(stepwise, mean(resid(test4.las2)^2))
mod_fit <- c(mod_fit, mean(resid(test3.las2)^2))
}
}
dev.off()
library(TLUtilities)
rm(list = ls())
### Demonstrating alternative algorithms to smooth raw light data
require(trawllight)
test <- test_process_all(dir.structure = light.dir[12],
cast.dir = "Downcast",
silent = T)
# source TLUtilities functions for testing
sapply(paste("./R/", dir("./R/"), sep = ""), source)
# Import csv file containing filepaths for light data DIRECTORIES. Each target directories should contain corr_Mk9Hauls.csv, deck1**.csv, and CastTimes.csv for a vessel/cruise combination. This list needs to be created by the user.
light.dir <- read.csv("D:/Projects/OneDrive/Thesis/Chapter 1 - Visual Foraging Condition in the Eastern Bering Sea/data/fileinv_lightdata_directory.csv", stringsAsFactors = F, header = F)
# Only use EBS shelf directories.
light.dir <- light.dir[which(grepl("ebs", light.dir[,1])),1]
test <- test_process_all(dir.structure = light.dir[12],
cast.dir = "Downcast",
silent = T)
dir.structure
light.dir[12]
getwd()
getwd("~")
getwd(".~/")
getwd("~./")
getwd("~/")
getwd("~\\")
getwd("~.\\")
getwd("./")
getwd()
dir("./")
dir("~/")
dir("~")
dir("")
dir("D:/")
test <- test_process_all(dir.structure = "D:\\Projects\\OneDrive\\Thesis\\Chapter 1 - Visual Foraging Condition in the Eastern Bering Sea\\data\\LightData\\Data\\year_09\\ebs\\v_89",
cast.dir = "Downcast",
silent = T)
test <- subset(test, vessel == 89 & cruise == 200901)
direct.orient <- readRDS(file = "D:/Projects/OneDrive/Thesis/Chapter 1 - Visual Foraging Condition in the Eastern Bering Sea/output/downcasts_algorithm.rds")
indirect.orient <- readRDS(file = "D:/Projects/OneDrive/Thesis/Chapter 1 - Visual Foraging Condition in the Eastern Bering Sea/output/downcasts_indirect_algorithm.rds")
haulz <- unique(test$haul)
stepwise <- vector()
mod_fit <- vector()
haulz <- unique(test$haul)
stepwise <- vector()
mod_fit <- vector()
pdf(file = "D:/test_downcasts.pdf", width = 10, height = 8)
for(i in 1:length(haulz)) {
testA <- subset(test, haul == haulz[i])
test2 <- testA
test2$dbin <- findInterval(test2$cdepth, seq(0, max(test2$cdepth), 2), rightmost.closed = T, left.open = F) * 2 - 2/2
test3 <- aggregate(trans_llight ~ vessel + cruise + haul + dbin, data = test2, FUN = median)
if(nrow(test3) > 4) {
test3.las2 <- loess.as2(x = test3$dbin, y = log10(test3$trans_llight))
test4 <- filter_stepwise(test2, depth.col = "cdepth", light.col = "trans_llight", agg.fun = median)
test4.las2 <- loess.as2(x = test4$cdepth, y = log10(test4$trans_llight))
plot1 <- ggplot() +
geom_point(data = testA, aes(y = cdepth, x = log10(trans_llight)), color = "black", size = rel(3), alpha = 0.5) +
geom_point(data = test2, aes(y = dbin, x = log10(trans_llight)), color = "red") +
scale_y_reverse(name = "Depth") +
scale_x_continuous(name = "log10(light)") +
ggtitle(haulz[i])
plot2 <- ggplot() +
geom_point(data = test4, aes(y = cdepth, x = log10(trans_llight)), color = "blue", size = rel(3), alpha = 0.5) +
geom_point(data = test3, aes(y = dbin, x = log10(trans_llight)), color = "red") +
geom_path(aes(y = seq(min(test3$dbin), max(test3$dbin), 0.2), x = predict(test3.las2, newdata = seq(min(test3$dbin), max(test3$dbin), 0.2))), color = "red") +
geom_path(aes(y = seq(min(test4$cdepth), max(test4$cdepth), 0.2), x = predict(test4.las2, newdata = seq(min(test4$cdepth), max(test4$cdepth), 0.2))), color = "blue", linetype = 2) +
scale_y_reverse(name = "Depth") +
scale_x_continuous(name = "log10(light)") +
ggtitle(" ")
direct.orient.sub <- subset(direct.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
indirect.orient.sub <- subset(indirect.orient, haul == haulz[i] & (cruise == 200901 & vessel == 89))
if(nrow(direct.orient.sub) >= 1) {
direct.orient.sub <- subset(direct.orient.sub, cdepth == min(direct.orient.sub$cdepth))
plot3 <- ggplot() + geom_density(aes(x = direct.orient$direct_residual[direct.orient$cdepth == min(direct.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = direct.orient.sub$direct_residual[1]), color = "red", linetype = 2) +
ggtitle(paste0("Quality: ", direct.orient.sub$quality, ", Min. Depth: ", min(direct.orient.sub$cdepth))) +
scale_x_continuous(name = "Direct residual") +
scale_y_continuous(name = "Density")
} else {
plot3 <- ggplot() + geom_text(aes(x = 1, y = 1, label = "Minimum depth > 5 m")) + ggtitle(" ")
}
if(nrow(indirect.orient.sub) >= 1) {
indirect.orient.sub <- subset(indirect.orient.sub, cdepth == min(indirect.orient.sub$cdepth))
plot4 <- ggplot() + geom_density(aes(x = indirect.orient$light_residual[indirect.orient$cdepth == min(indirect.orient.sub$cdepth)])) +
geom_vline(aes(xintercept = indirect.orient.sub$light_residual[1]), color = "red", linetype = 2) +
scale_x_continuous(name = "Indirect residual") +
scale_y_continuous(name = "Density") + ggtitle(" ")
} else {
plot4 <- ggplot() + geom_text(aes(x = 1, y = 1, label = "Minimum depth > 5 m")) + ggtitle(" ")
}
print(grid.arrange(plot1, plot2, plot3, plot4, nrow = 2))
stepwise <- c(stepwise, mean(resid(test4.las2)^2))
mod_fit <- c(mod_fit, mean(resid(test3.las2)^2))
}
}
dev.off()
Sys.info()
